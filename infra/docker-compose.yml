version: "3.8"

# airflow common 
x-common:
  &common
  image: apache/airflow:2.6.0
  build: ./airflow
  user: "${AIRFLOW_UID}:0"
  env_file: ./airflow/.env
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
  networks:
    - localnetwork

x-depends-on:
  &depends-on
  depends_on:
    postgres:
      condition: service_healthy
    airflow-init:
      condition: service_completed_successfully

#volumes:
#  redis:
#    external: false

networks:
  localnetwork:
    name: localnetwork
    driver: bridge

services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./_databases/postgres:/var/lib/postgresql/data
      - ./db/config/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
      - ./db/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/dump/beltrano_oltp_10k_pedidos.backup:/etc/postgresql/beltrano_oltp_10k_pedidos.backup
      - ./db/dump/beltrano_dw.backup:/etc/postgresql/beltrano_dw.backup
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
    networks:
      - localnetwork
    mem_limit: 512M

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@pg.com"
      PGADMIN_DEFAULT_PASSWORD: "postgres"
    ports:
      - 15432:80
    depends_on:
      - postgres
    networks:
      - localnetwork
    mem_limit: 1024M

  jupyter_lab:
    container_name: jupyter_lab
    build: ./jupyter
    ports: 
      - "18888:8888"
    environment: 
      - JUPYTER_ENABLE_LAB=yes
    depends_on:
      - postgres
    networks:
      - localnetwork
    volumes: 
      - ./jupyter/notebooks:/home/jovyan
  
  metabase-app:
    image: metabase/metabase
    restart: always
    ports:
      - 13000:3000
    volumes:
      # declare your mount volume /host/dir:/container/dir
      #- ./data/metabase:/metabase-data
      - ./metabase/plugins:/plugins
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: metabase
      MB_DB_PASS: metabase
      MB_DB_HOST: postgres # or host.docker.internal
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      - postgres
    networks:
      - localnetwork
      
  cube:
    container_name: cubejs
    image: cubejs/cube:v0.33.2
    ports:
      - 14000:4000
      - 35432:35432
    environment:
      - CUBEJS_DEV_MODE=true
      - CUBEJS_DB_HOST=postgres
      - CUBEJS_DB_PORT=5432
      - CUBEJS_DB_NAME=beltrano_dw
      - CUBEJS_DB_USER=postgres
      - CUBEJS_DB_PASS=postgres
      - CUBEJS_DB_TYPE=postgres
      - CUBEJS_API_SECRET=1b101a00c978eb092d4bf97840a9b127
    volumes:
      - ./cube/dev:/cube/conf
    networks:
      - localnetwork
      
  # Airflow Services
  airflow-scheduler:
    <<: *common
    <<: *depends-on
    container_name: airflow-scheduler
    command: scheduler
    restart: on-failure
    ports:
      - "8793:8793"

  airflow-webserver:
    <<: *common
    <<: *depends-on
    container_name: airflow-webserver
    restart: always
    command: webserver
    ports:
      - "18080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5
  
  airflow-init:
    <<: *common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version  